import { ConstantsManager, TimeManager } from "../api/utils/index.js"
import GroupManager from "../api/groups.js"

import TelegramBot from "node-telegram-bot-api";

const bot = new TelegramBot(
  ConstantsManager.TELEGRAM_BOT_TOKEN,
  {
    polling: true
  }
);

const isGroupFetched = await GroupManager.fetchGroups()

bot.on('inline_query', async (query) => {
  if (isGroupFetched) {
    const results = [];

    if (query.query) {
      const group = await GroupManager.getGroupByString(query.query)

      if (!group.found) {
        results.push({
          type: 'article',
          id: 1,
          title: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
          description: '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –º—ã –Ω–∞–π–¥–µ–º –µ–≥–æ.',
          input_message_content: {
            message_text: `‚õî –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –º—ã –Ω–∞–π–¥–µ–º –µ–≥–æ.\n\n@ttgdtbot`,
          },
        });
      } else {
        results.push({
          type: 'article',
          id: 1,
          title: 'üßë‚Äçü§ù‚Äçüßë –í–∞—à–∞ –≥—Ä—É–ø–ø–∞',
          description: group.name,
          input_message_content: {
            message_text: group.name,
          },
        });
        
        results.push({
          type: 'article',
          id: 2,
          title: 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
          description: '–Ω–∞ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ [21.02]',
          input_message_content: {
            message_text: group.name,
          },
        });
        
        const weekdaysNumber = [1,2,3,4,5,6]

        weekdaysNumber.forEach((weekdayNumber) => {
          results.push({
            type: 'article',
            id: weekdayNumber + 30,
            title: 'üóìÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –∑–∞–º–µ–Ω)',
            description: `–Ω–∞ ${TimeManager.getWeekdayByString(weekdayNumber, true)}`,
            input_message_content: {
              message_text: group.name,
            },
          });
        })
      }
    }

    try {
      return await bot.answerInlineQuery(query.id, results);
    } catch (error) {
      console.error(`‚ùå [${error.name}] ${error.message}`)
    }
  }
});

bot.onText('/start', async (msg) => {
  await bot.sendMessage(
    msg.chat.id,
    `üëã –î–æ–±—Ä—ã–π!\n\n‚ÑπÔ∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥, –Ω–æ –≤—ã –µ–≥–æ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–∑–¥–µ (–≤ –õ–°, –∫–∞–Ω–∞–ª–∞—Ö, –≥—Ä—É–ø–ø–∞—Ö).`,
    {
      reply_to_message_id: msg.message_id,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üí≠ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
              switch_inline_query_current_chat: ""
            }
          ]
        ]
      }
    }
  );
});