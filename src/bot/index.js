import { ConstantsManager, TimeManager } from "../api/utils/index.js"

import TelegramBot from "node-telegram-bot-api";
import Utils from "./utils.js";
import SheduleMessagesManager from "./messages.js";
import Shedule from "../api/shedule.js";
import GroupManager from "../api/groups.js"

const bot = new TelegramBot(
  ConstantsManager.TELEGRAM_BOT_TOKEN,
  {
    polling: true
  }
);

const isGroupFetched = await GroupManager.fetchGroups()

bot.on('inline_query', async (query) => {
  if (isGroupFetched) {
    const results = [];

    if (query.query) {
      const group = await GroupManager.getGroupByString(query.query)

      const reply_markup = {
        inline_keyboard: [
          [
            {
              text: "üßë‚Äçüíª –ê–≤—Ç–æ—Ä –±–æ—Ç–∞",
              url: "https://t.me/shishkevichd"
            }
          ]
        ]
      }

      if (!group.found) {
        results.push({
          type: 'article',
          id: Utils.generateRandomNumber(),
          title: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
          description: '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –º—ã –Ω–∞–π–¥–µ–º –µ–≥–æ.',
          reply_markup: reply_markup,
          thumbnail_url: Utils.getInlineImage("search"),
          thumbnail_width: 32,
          thumbnail_height: 32,
          input_message_content: {
            message_text: `‚õî –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –º—ã –Ω–∞–π–¥–µ–º –µ–≥–æ.`,
          },
        });
      } else {
        const shedule = new Shedule(group.name)

        results.push({
          type: 'article',
          id: Utils.generateRandomNumber(),
          title: `–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`,
          description: `–ì—Ä—É–ø–ø–∞: ${group.name}\n–£—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è: ${TimeManager.getWeekParity() == 0 ? "–Ω–µ—á–µ—Ç–Ω–∞—è" : "—á–µ—Ç–Ω–∞—è"}`,
          thumbnail_url: Utils.getInlineImage("group"),
          thumbnail_width: 32,
          thumbnail_height: 32,
          reply_markup: reply_markup,
          input_message_content: {
            message_text: group.name,
          },
        });

        results.push({
          type: 'article',
          id: Utils.generateRandomNumber(),
          title: '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å –∑–∞–º–µ–Ω–∞–º–∏)',
          description: '–Ω–∞ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ [21.02].',
          thumbnail_url: Utils.getInlineImage("today"),
          thumbnail_width: 32,
          thumbnail_height: 32,
          reply_markup: reply_markup,
          input_message_content: {
            message_text: group.name,
          },
        });

        results.push({
          type: 'article',
          id: Utils.generateRandomNumber(),
          title: '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –∑–∞–º–µ–Ω)',
          description: '–Ω–∞ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ [21.02].',
          thumbnail_url: Utils.getInlineImage("today"),
          thumbnail_width: 32,
          thumbnail_height: 32,
          reply_markup: reply_markup,
          input_message_content: {
            message_text: group.name,
          },
        });

        const weekShedule = await shedule.getSheduleForWeek(false)

        results.push({
          type: 'article',
          id: Utils.generateRandomNumber(),
          title: '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –∑–∞–º–µ–Ω)',
          description: `–Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é`,
          thumbnail_url: Utils.getInlineImage("weekday"),
          thumbnail_width: 32,
          thumbnail_height: 32,
          reply_markup: reply_markup,
          input_message_content: {
            message_text: SheduleMessagesManager.getWeekSheduleMessage(group.name, weekShedule),
          },
        });
      }
    }

    try {
      return await bot.answerInlineQuery(query.id, results);
    } catch (error) {
      console.error(`‚ùå [${error.name}] ${error.message}`)
    }
  }
});

bot.onText('/start', async (msg) => {
  await bot.sendMessage(
    msg.chat.id,
    `üëã –î–æ–±—Ä—ã–π!\n\n‚ÑπÔ∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥, –Ω–æ –≤—ã –µ–≥–æ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–∑–¥–µ (–≤ –õ–°, –∫–∞–Ω–∞–ª–∞—Ö, –≥—Ä—É–ø–ø–∞—Ö).`,
    {
      reply_to_message_id: msg.message_id,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üí≠ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
              switch_inline_query_current_chat: ""
            }
          ]
        ]
      }
    }
  );
});